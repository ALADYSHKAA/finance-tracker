// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(FinanceTrackerContext))]
    [Migration("20230416212437_user-update-roles-and-nullable-types")]
    partial class userupdaterolesandnullabletypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Domains.Roles.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Created = new DateTime(2023, 4, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Супер Админ",
                            Title = "SuperAdmin",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2L,
                            Created = new DateTime(2023, 4, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Супер Админ",
                            Title = "RolesAdmin",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Domain.Domains.Users.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ExternalIdentityProviderGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("ExternalIdentityProviderType")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -100L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "set-some-email-later@finance-tracker.ru",
                            FirstName = "Link",
                            LastName = "One",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -1L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "sa@finance-tracker.ru",
                            FirstName = "Отто",
                            LastName = "Нормалвербраухер",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "stierlitz@finance-tracker.ru",
                            FirstName = "Всеволод",
                            LastName = "Штирлиц",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -3L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "curie@finance-tracker.ru",
                            FirstName = "Мария",
                            LastName = "Кюри",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -4L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "einstein@finance-tracker.ru",
                            FirstName = "Альберт",
                            LastName = "Эйнштейн",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -5L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disabled = false,
                            Email = "monroe@finance-tracker.ru",
                            FirstName = "Мерлин",
                            LastName = "Монро",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.Role", b =>
                {
                    b.HasOne("Domain.Domains.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Domain.Domains.Users.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domains.Roles.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Domains.Roles.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domains.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domains.Roles.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
